/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package msm;

import java.awt.Font;
import java.awt.FontFormatException;
import java.awt.MouseInfo;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.awt.event.KeyEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.text.BadLocationException;
import javax.swing.text.Document;
import javax.swing.text.html.HTMLDocument;
import javax.swing.text.html.HTMLEditorKit;
import msm.model.Emoticons;
import msm.sounds.Sounds;



/**
 *
 * @author mgalvao3
 */
public class Message extends javax.swing.JFrame implements FocusListener {

    private final String mContactIP;
    private OnMessageListener mClosedListener;
    private String mMyName;
    private Boolean mFocus = false;
    private final EmoticonList mEmoticonsWindow;

    /**
     * Creates new form Message
     */
    public Message(String ip, String contactName, String myName) {
        mContactIP = ip;
        mMyName = myName;
        initComponents();

        labelNome.setText(contactName);
        avatar.setIcon(new ImageIcon("images/avatar_empty.jpg"));
        avatar1.setIcon(new ImageIcon("images/avatar_empty.jpg"));
        
        this.addWindowFocusListener(new WindowAdapter() {
            @Override
            public void windowGainedFocus(WindowEvent e) {
                super.windowGainedFocus(e); //To change body of generated methods, choose Tools | Templates.
                mFocus = true;
            }

            @Override
            public void windowLostFocus(WindowEvent e) {
                super.windowLostFocus(e); //To change body of generated methods, choose Tools | Templates.
                mFocus = false;
            }
        });
        
        mEmoticonsWindow = new EmoticonList();
    }
    
    public void setWindowClosedListener(OnMessageListener l) {
        mClosedListener = l;
    }
    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        textMessage = new javax.swing.JTextArea();
        avatar = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        textChat = new javax.swing.JTextPane();
        avatar1 = new javax.swing.JLabel();
        jToolBar1 = new javax.swing.JToolBar();
        buttonEmoticon = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JToolBar.Separator();
        jButton2 = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JToolBar.Separator();
        jButton3 = new javax.swing.JButton();
        labelNome = new javax.swing.JLabel();
        labelStatus = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        textMessage.setColumns(20);
        textMessage.setRows(2);
        textMessage.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                textMessageKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                textMessageKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(textMessage);

        avatar.setBackground(new java.awt.Color(102, 255, 255));
        avatar.setSize(new java.awt.Dimension(50, 50));

        textChat.setContentType("text/html"); // NOI18N
        textChat.setFocusable(false);
        jScrollPane2.setViewportView(textChat);

        avatar1.setBackground(new java.awt.Color(102, 255, 255));
        avatar1.setSize(new java.awt.Dimension(50, 50));

        jToolBar1.setFloatable(false);

        buttonEmoticon.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        buttonEmoticon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/msm/smiley.png"))); // NOI18N
        buttonEmoticon.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        buttonEmoticon.setFocusable(false);
        buttonEmoticon.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        buttonEmoticon.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        buttonEmoticon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonEmoticonActionPerformed(evt);
            }
        });
        jToolBar1.add(buttonEmoticon);
        jToolBar1.add(jSeparator1);

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/msm/upload.png"))); // NOI18N
        jButton2.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        jButton2.setFocusable(false);
        jButton2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton2.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar1.add(jButton2);
        jToolBar1.add(jSeparator2);

        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/msm/nudge.png"))); // NOI18N
        jButton3.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        jButton3.setFocusable(false);
        jButton3.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton3.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar1.add(jButton3);

        labelNome.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        labelNome.setText("Nome do Contato");

        labelStatus.setFont(new java.awt.Font("Lucida Grande", 0, 11)); // NOI18N
        labelStatus.setText("(Online)");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(labelNome)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(labelStatus)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 350, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(avatar1, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(avatar, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(labelNome)
                            .addComponent(labelStatus))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(avatar, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(avatar1, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void buttonEmoticonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonEmoticonActionPerformed
        mEmoticonsWindow.setLocation(MouseInfo.getPointerInfo().getLocation());
        mEmoticonsWindow.setVisible(true);
        mEmoticonsWindow.requestFocusInWindow();
        mEmoticonsWindow.forceFocus();
    }//GEN-LAST:event_buttonEmoticonActionPerformed

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        if(mClosedListener != null) {
            mClosedListener.onWindowClosed(mContactIP);
        }
    }//GEN-LAST:event_formWindowClosed

    private void textMessageKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textMessageKeyPressed
        if(evt.getKeyCode() == KeyEvent.VK_ENTER) {
            String msg = textMessage.getText();
            mClosedListener.onMessageSent(mContactIP, msg);
            
            addMessageText("<font color='gray'>" + mMyName + ":</font> <br /> ▪ " + Emoticons.findReplace(msg));
        }
    }//GEN-LAST:event_textMessageKeyPressed

    private void textMessageKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textMessageKeyReleased
        if(evt.getKeyCode() == KeyEvent.VK_ENTER) {
            textMessage.setText("");
        }
    }//GEN-LAST:event_textMessageKeyReleased


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel avatar;
    private javax.swing.JLabel avatar1;
    private javax.swing.JButton buttonEmoticon;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JToolBar.Separator jSeparator1;
    private javax.swing.JToolBar.Separator jSeparator2;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JLabel labelNome;
    private javax.swing.JLabel labelStatus;
    private javax.swing.JTextPane textChat;
    private javax.swing.JTextArea textMessage;
    // End of variables declaration//GEN-END:variables

    /**
     * @return the mContactIP
     */
    public String getContactIP() {
        return mContactIP;
    }

    public void messageReceived(String msg, String fromName) {
        addMessageText("<font color='gray'>" + fromName + ":</font> <br /> ▪ " + Emoticons.findReplace(msg));
        
        if(!mFocus) {
            Popup popup = new Popup(fromName + " disse:", msg, Sounds.SoundName.MESSAGE);
            popup.fadeIn();
        }
    }

    private void addMessageText(String msg) {
        try {
            HTMLDocument doc = (HTMLDocument)textChat.getDocument();
            HTMLEditorKit editorKit = (HTMLEditorKit)textChat.getEditorKit();
            editorKit.insertHTML(doc, doc.getLength(), msg, 0, 0, null);
            
            textChat.select(doc.getLength(), doc.getLength());
        } catch (BadLocationException ex) {
            Logger.getLogger(Message.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(Message.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    public interface OnMessageListener {
        void onWindowClosed(String ip);
        void onMessageSent(String destinationIP, String msg);
    }

    @Override
    public void focusGained(FocusEvent e) {
        mFocus = true;
    }

    @Override
    public void focusLost(FocusEvent e) {
        mFocus = false;
    }
    
    
}
